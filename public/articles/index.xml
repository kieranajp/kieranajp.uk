<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on Kieran Patel | Web Developer</title>
    <link>https://www.kieranajp.uk/articles/</link>
    <description>Recent content in Articles on Kieran Patel | Web Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Mon, 05 Oct 2015 00:30:25 +0100</lastBuildDate>
    <atom:link href="https://www.kieranajp.uk/articles/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Throwing ideas together with System.JS</title>
      <link>https://www.kieranajp.uk/articles/system-js/</link>
      <pubDate>Mon, 05 Oct 2015 00:30:25 +0100</pubDate>
      
      <guid>https://www.kieranajp.uk/articles/system-js/</guid>
      <description>&lt;p&gt;A huge annoyance when starting a new JavaScript project today is in the bootstrap phase. Yes, it&amp;rsquo;s still perfectly possible to do something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #93a1a1; font-style: italic&#34;&gt;// ALL THE JAVASCRIPT!!!&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But if you&amp;rsquo;ve ever had to work on a site of any decent size, you&amp;rsquo;ll know that doing this without any organisation system quickly becomes unmaintainable, a mess of scrolling up and down forever to find the function you want to work with.&lt;/p&gt;

&lt;p&gt;Task runners like Grunt and Gulp help with this problem, allowing us to break up our JavaScript into smaller files and adding a compile step to concatenate them. Throwing NPM and Browserify into the mix takes this a step further, allowing us to explicitly define dependencies and share state without writing everything to the global scope, the way we&amp;rsquo;re used to doing in Node.js:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;require(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;underscore&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Parser&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;require(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./modules/parser&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These tools are fantastic; I use them daily and wholeheartedly recommend them. But there&amp;rsquo;s a definite problem with them, and that&amp;rsquo;s the amount of initial setup required to start something with them.&lt;/p&gt;

&lt;p&gt;If I&amp;rsquo;m just going to start tinkering with a new project, not yet knowing if it&amp;rsquo;s going to be fleshed out into a working thing yet or if it&amp;rsquo;s not going to work out and be forever relegated to my &lt;code&gt;~/playground&lt;/code&gt; folder, I don&amp;rsquo;t want to spend time setting up Grunt and Browserify, answer a short questionnaire from &lt;code&gt;npm init&lt;/code&gt;, and then another from &lt;code&gt;bower init&lt;/code&gt;, and then pull in libraries from Bower, and then deal with the &lt;em&gt;awful&lt;/em&gt; structure of the &lt;code&gt;bower_components&lt;/code&gt; folder&amp;hellip; I&amp;rsquo;ll be bored of the idea by then. Additionally, I want to write JS code the way I like: using a module system, through some sort of transpiler to let me use a superset of the language (be that ES6, CoffeeScript, JSX, or TypeScript) - that way I don&amp;rsquo;t have to rewrite half the code later once I&amp;rsquo;ve decided to keep tinkering.&lt;/p&gt;

&lt;p&gt;In short, I want the code niceties of having a compiler step, without the initial set-up cost.&lt;/p&gt;

&lt;p&gt;The solution I&amp;rsquo;ve found is &lt;a href=&#34;https://github.com/systemjs/systemjs&#34;&gt;SystemJS&lt;/a&gt;. From their website:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;[SystemJS is a] Universal dynamic module loader - loads ES6 modules, AMD, CommonJS and global scripts in the browser and NodeJS. Works with both Traceur and Babel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this mean? Well, by using SystemJS I can write and load in JavaScript modules no matter how they&amp;rsquo;re written: Node-style &lt;code&gt;require()&lt;/code&gt;, RequireJS&amp;rsquo;s / AMD&amp;rsquo;s &lt;code&gt;define&lt;/code&gt;, new ES6-style &lt;code&gt;import&lt;/code&gt;, or plain old binding to global scope (&lt;code&gt;window.$&lt;/code&gt;) - it doesn&amp;rsquo;t matter. I can also &lt;em&gt;use&lt;/em&gt; any libraries or modules that have been written in any of these ways. SystemJS doesn&amp;rsquo;t care.&lt;/p&gt;

&lt;p&gt;Most importantly though, with SystemJS I can write literally half a dozen lines of boilerplate and then get down to building what I want to build.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Before I get started, please note that this is &lt;strong&gt;not&lt;/strong&gt; remotely production-ready - this is just how I get stuck into hacking in the fastest possible way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s create a new file, &lt;code&gt;index.html&lt;/code&gt;, and drop a few old-fashioned &lt;code&gt;script&lt;/code&gt; tags in there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/systemjs/0.18.4/system.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;System.&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we&amp;rsquo;re simply loading in SystemJS from a CDN, in the same way I&amp;rsquo;m sure you&amp;rsquo;ve loaded in jQuery a hundred times in the past. Then, we&amp;rsquo;re telling it to load in our JavaScript from an &lt;code&gt;app.js&lt;/code&gt; file - let&amp;rsquo;s create that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;lemon&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;require(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./lemon.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;console.log(lemon());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And &lt;code&gt;lemon.js&lt;/code&gt;?&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;module.exports&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;üçã&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Bam: we&amp;rsquo;ve now got essentially what Browserify gives us, with no initial set-up, manual compile step, or watcher to start up and then wait for. Just refresh and go.&lt;/p&gt;

&lt;p&gt;We could start hacking away from here as-is, but as I said above, I&amp;rsquo;d prefer to write code using a transpiler. Again, this is super-simple with SystemJS. Let&amp;rsquo;s add a snippet of config before we load in &lt;code&gt;app.js&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/systemjs/0.18.4/system.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.25/browser.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;System.config({&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;transpiler:&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;defaultJSExtensions:&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;System.&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s break this down: First we&amp;rsquo;ve loaded in Babel (an ES6/JSX transpiler), again just by dropping a CDN link in there. Then, we&amp;rsquo;ve given SystemJS a config object telling it to use Babel, and also to automatically add a &lt;code&gt;.js&lt;/code&gt; extension to module links (so &lt;code&gt;require(&#39;./lemon.js&#39;)&lt;/code&gt; above could just become &lt;code&gt;require(&#39;./lemon&#39;)&lt;/code&gt;). Finally, we&amp;rsquo;re going to rewrite our JavaScript to use ES6 syntax, adding a new class for fun (&lt;code&gt;lemon.js&lt;/code&gt; can stay as-is, though):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93a1a1; font-style: italic&#34;&gt;/* app.js */&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;lemon&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./lemon&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Banana&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./banana&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #657b83&#34;&gt;console.log(lemon());&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;console.log((&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Banana()).sayHi());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93a1a1; font-style: italic&#34;&gt;/* banana.js */&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Banana&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;sayHi()&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;üçå&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can hack with all the niceties that ES6 brings to the table, as well! TypeScript compilation works in much the same way, and plugins exist to load in CoffeeScript and many other filetypes as well.&lt;/p&gt;

&lt;p&gt;Did you notice, though, that we&amp;rsquo;re mixing syntaxes here? SystemJS, being a &amp;ldquo;universal&amp;rdquo; module loader, simply doesn&amp;rsquo;t care that we&amp;rsquo;re using ES6&amp;rsquo;s &lt;code&gt;import&lt;/code&gt; to load in &lt;code&gt;lemon.js&lt;/code&gt;, a CommonJS module. In the same way, we could just write an &amp;ldquo;old-fashioned&amp;rdquo; JavaScript file, that just binds to the global scope (like older versions of jQuery did, for example) and still be able to load them in as if they were modularised. Look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93a1a1; font-style: italic&#34;&gt;/* app.js */&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;lemon&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./lemon&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Banana&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./banana&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;pineapple&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;./pineapple&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #657b83&#34;&gt;console.log(lemon());&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;console.log((&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;Banana()).sayHi());&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;console.log(pineapple());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #93a1a1; font-style: italic&#34;&gt;/* pineapple.js */&lt;/span&gt;
&lt;span style=&#34;color: #859900&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;pineapple()&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #859900&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;üçç&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows you to use pretty much any library you want to, without worrying about how to pull it in and then how to list it as a dependency of a module, and then having JSHint complain because you&amp;rsquo;re assuming existence of a global variable.&lt;/p&gt;

&lt;p&gt;And just to wrap up, because this is getting long, this is how you could load in an external module, if you did need to start using libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/systemjs/0.18.4/system.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;quot;//cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.25/browser.js&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;System.config({&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;transpiler:&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;babel&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;defaultJSExtensions:&lt;/span&gt; &lt;span style=&#34;color: #859900&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;map:&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;lodash&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;//cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.min.js&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #657b83&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #657b83&#34;&gt;});&lt;/span&gt;

    &lt;span style=&#34;color: #657b83&#34;&gt;System.&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;app.js&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;map&lt;/code&gt; object in SystemJS&amp;rsquo;s config defines where to look for a particular import statement. So now, we can simply use Lodash as if it were an ES6 module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #fdf6e3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #859900&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color: #657b83&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #2aa198&#34;&gt;&amp;#39;lodash&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #657b83&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #657b83&#34;&gt;console.log(_.VERSION);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And SystemJS would know to download Lodash from the CDN there and then.&lt;/p&gt;

&lt;p&gt;As you can probably tell, I&amp;rsquo;m excited about this near-frictionless way of prototyping a client-side idea, and by being able to use a module system this early on in a project I&amp;rsquo;m finding myself naturally writing smaller, simpler components - better code - and thus getting an application to a useable state much more quickly than by doing things the old-fashioned way. Between this and new ES6 features, JavaScript just became a whole lot more fun!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A devenv that doesn&#39;t suck</title>
      <link>https://www.kieranajp.uk/articles/ansible/</link>
      <pubDate>Sat, 08 Aug 2015 19:41:52 +0100</pubDate>
      
      <guid>https://www.kieranajp.uk/articles/ansible/</guid>
      <description>&lt;p&gt;You shouldn&amp;rsquo;t be using MAMP. Or XAMPP, or WAMP. Or installing Ruby, Node.JS, or Python on your computer to develop sites with.&lt;/p&gt;

&lt;p&gt;In fact, you should be able to develop without installing any sort of runtime on your machine at all. That&amp;rsquo;s why I&amp;rsquo;ve worked on &lt;a href=&#34;https://github.com/kieranajp/ansible&#34;&gt;this Vagrant machine hack&lt;/a&gt; to make life easier for setting up development environments.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Even with Docker and all it&amp;rsquo;s shininess just round the corner, I stand behind this as a great solution to managing multiple small sites with zero-config. Read on!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m not going to wax poetic about &lt;em&gt;why&lt;/em&gt; - &lt;a href=&#34;https://www.vagrantup.com/docs/why-vagrant/&#34;&gt;that&amp;rsquo;s&lt;/a&gt; &lt;a href=&#34;http://gratzc.github.io/it-works-on-my-machine-chef-vagrant/#/automate-all-the-things-begin&#34;&gt;been&lt;/a&gt; &lt;a href=&#34;http://www.jedi.be/blog/2011/09/06/vagrant-devopsdays-mountainview/&#34;&gt;done&lt;/a&gt;. In a nutshell, however you&amp;rsquo;re running your (especially interpreted-language) applications on your own MacBook or Windows PC is &lt;em&gt;not&lt;/em&gt; the same as how they&amp;rsquo;ll be run on the server. The operating system is likely different, the available libraries and versions of these are different. Your colleagues may well be running a totally different setup again - cue the cries of &lt;em&gt;&amp;ldquo;well, it works on &lt;strong&gt;my&lt;/strong&gt; machine&amp;rdquo;&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;No, what you want to do is &lt;em&gt;virtualise&lt;/em&gt; - run your development environment locally on a virtual machine with the same operating system and software as your end server.&lt;/p&gt;

&lt;p&gt;This is a solved problem with Vagrant and providers such as &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt; and &lt;a href=&#34;https://www.chef.io/&#34;&gt;Chef&lt;/a&gt;; what&amp;rsquo;s harder is having as nice of a development experience as tools like MAMP Pro give us when it comes to spinning up a new website. With MAMP Pro, it&amp;rsquo;s pretty much turnkey; with Vagrant or even Vagrant-based setups like &lt;a href=&#34;https://laravel.com/docs/5.2/homestead&#34;&gt;Laravel Homestead&lt;/a&gt;, there&amp;rsquo;s some config to do up-front - at the very least changing your &lt;code&gt;/etc/hosts&lt;/code&gt; file and setting up a new site in Apache or Nginx.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a very long-winded segway into &lt;a href=&#34;https://github.com/kieranajp/ansible&#34;&gt;my hacky little project&lt;/a&gt;. This is a Vagrant box and an Ansible provisioner that sets up a PHP5 / Apache VM to be (hopefully) autonomous - by following a folder structure convention and doing some magic with Apache&amp;rsquo;s &lt;a href=&#34;https://httpd.apache.org/docs/current/vhosts/mass.html&#34;&gt;&lt;code&gt;VirtualDocumentRoot&lt;/code&gt;&lt;/a&gt;, we can easily spin up a new (though somewhat opinionated) PHP website.&lt;/p&gt;

&lt;p&gt;The crux of it is this: When you have the VM running, creating a folder with the name of your site (let&amp;rsquo;s say &lt;code&gt;example&lt;/code&gt;), and inside that a &lt;code&gt;public_html&lt;/code&gt; folder (which will act as your document root) will set up a new website for you available at (in this case) &lt;code&gt;http://example.vg&lt;/code&gt; with PHP and MySQL raring to go. No changes to your hostsfile, no editing YAML files (sorry Homestead!) - it&amp;rsquo;s as simple as creating two folders.&lt;/p&gt;

&lt;p&gt;To set this up, you&amp;rsquo;ll need Vagrant and Virtualbox installed, and then you can clone down the repository and &lt;code&gt;vagrant up&lt;/code&gt;. You&amp;rsquo;ll also need to install &lt;code&gt;dnsmasq&lt;/code&gt; - this provides the magic that prevents you from having to edit &lt;code&gt;/etc/hosts&lt;/code&gt; by running a DNS server locally that sends all requests to &lt;code&gt;.vg&lt;/code&gt; (for VaGrant) domains to your VM. After the initial setup, it&amp;rsquo;s that simple - I and a couple of others have been running this without a hiccup for several months now. For bonus points, you can install the &lt;a href=&#34;http://vagrantmanager.com&#34;&gt;Vagrant Manager&lt;/a&gt; OS X menubar application, which is perfect for the terminal-allergic.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m hesitant to even call it an &amp;ldquo;open-source project&amp;rdquo; as most of it is instructions for how to set this up on your own computer (to automate this, you&amp;rsquo;d have to trust me with &lt;code&gt;sudo&lt;/code&gt;, and you probably shouldn&amp;rsquo;t do that!).&lt;/p&gt;

&lt;p&gt;If you try it out, please let me know! And if you do run into any problems I&amp;rsquo;ll be happy to take a look - just open an issue on the repository and I&amp;rsquo;ll get back to you.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git is not scary or hard!</title>
      <link>https://www.kieranajp.uk/articles/version-control/</link>
      <pubDate>Wed, 01 Oct 2014 22:11:51 +0100</pubDate>
      
      <guid>https://www.kieranajp.uk/articles/version-control/</guid>
      <description>

&lt;p&gt;Recently, I was reminded (by virtue of a panicked tweet from a designer who had deleted a website) that there are many people making websites today who are unfamiliar with the concept of version control.&lt;/p&gt;

&lt;p&gt;Had the designer been using version control, this would have been little more than a mild inconvenience; not remotely worth panicking about.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;ve seen many an &amp;ldquo;introduction to Git&amp;rdquo; article around that does little more than list a series of Unix commands, guaranteed to turn anyone who is not already comfortable with using Git via the command-line off within about four seconds. These, I feel, are not accurate represenations of how one could be using Git, and do more harm than good.&lt;/p&gt;

&lt;p&gt;Version control is not hard. It&amp;rsquo;s not scary. It does not require any programming knowledge, and despite what you may read on some sites, does not require ever opening a Terminal window in order to reap the benefits.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve even set up some clients, who would not describe themselves as technical, using version control to make content updates.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;N.B.: There are a whole bunch of different version control systems out there, each with different pros and cons - Subversion (SVN), Mercurial (HG), and Team Foundation Server (TFS), to name but a few. However, arguably the most popular (and my personal favourite) is Git, so while the crux of this article pertains to any version control system, I&amp;rsquo;ll be using the Git vernacular.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;okay-what-does-it-actually-give-me:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Okay, what does it actually give me?&lt;/h2&gt;

&lt;p&gt;Does this look familiar?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;henderson-report.png&#34; alt=&#34;image&#34; title=&#34;A folder structure containing several .docx files all named the same with different version numbers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This is, in a way, a very primitive form of version control; after all, you are keeping track of versions to keep some sort of a history.&lt;/p&gt;

&lt;p&gt;How about this?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;henderson-email.png&#34; alt=&#34;email&#34; title=&#34;An email asking if the attached document is the latest one and if not can they send the updates&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re using version control, you can kiss goodbye to this scenario.&lt;/p&gt;

&lt;p&gt;A VCS allows you to turn a regular folder on your computer into a &amp;lsquo;time machine&amp;rsquo; (or &amp;lsquo;repository&amp;rsquo;, but that doesn&amp;rsquo;t sound quite so cool). Within that folder, every change you make to a file is tracked, and at any point you can &amp;lsquo;save&amp;rsquo; your progress (this is called a &amp;lsquo;commit&amp;rsquo;, in Git nomenclature). It&amp;rsquo;s possible to move between commits - travel through time, if you will. Want to see what a file looked like a year ago? It&amp;rsquo;s easy to find out. Want to experiment with some changes, but have piece of mind in case something goes wrong? Go ahead, you can roll the changes back if they don&amp;rsquo;t work out, or keep them if they do.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For me, version control has become the equivalent of &lt;code&gt;File &amp;gt; Save&lt;/code&gt; in the 1990s: saving your document took a minute or two, so you didn&amp;rsquo;t do it so often. These days, I at least have &lt;code&gt;cmd+s&lt;/code&gt; compulsion (or even autosave), so the habit of making a conscious decision of saving for me has moved to committing, instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;git-servers:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Git servers&lt;/h3&gt;

&lt;p&gt;The magic really happens, though, when you hook the repository up to a Git server. You may have heard of GitHub or Bitbucket - these sites provide Git servers for you to use with none of the setup hassle. Doing so will create a full backup of your repository, and all it&amp;rsquo;s time-travelling capabilities.&lt;/p&gt;

&lt;p&gt;Want to transfer your work to a laptop for the road? Download the complete repository from the server. Your computer gets stolen or broken? Download the complete repository from the server. Not sure if you have the latest version? Pull down from the server to bring yourself back up to date.&lt;/p&gt;

&lt;p&gt;The scenarios in the images above literally become ancient history.&lt;/p&gt;

&lt;h3 id=&#34;git-for-deployment:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Git for deployment&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re making a website, with a little configuration Git can even be used for deployment. See if this sounds familiar: firing up an FTP client and painstakingly uploading each file you&amp;rsquo;ve changed, then worrying whether or not somebody has made their own changes on the server that you might be overwriting, then finding out the next day that your changes have been overwritten by someone else. If your server is configured to just pull the latest changes from Git, you can turn off FTP (which you really shouldn&amp;rsquo;t be using anyway), and all of the above problems simply cease to exist.&lt;/p&gt;

&lt;h2 id=&#34;give-git-a-go:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Give Git a Go&lt;/h2&gt;

&lt;p&gt;No matter how you work, if you&amp;rsquo;re working on anything - even Office files and other typically non-developer stuff! - Git will make your life a million times easier.&lt;/p&gt;

&lt;p&gt;Unfortunately, since Git started life as a command-line tool, a lot of the tutorials out there refer to cracking open Terminal.app and typing what some people refer to &amp;ldquo;gobbledegook&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t let this deter you!&lt;/p&gt;

&lt;p&gt;While I believe it&amp;rsquo;s important to have an understanding of how the terminal works, if you&amp;rsquo;re just dipping your toe into version control it&amp;rsquo;s easier to use something like the excellent &lt;a href=&#34;http://sourcetree.com&#34;&gt;SourceTree&lt;/a&gt;. With this, you can reap 90% of the benefits of Git without ever even seeing a command prompt.&lt;/p&gt;

&lt;p&gt;In fact, this is exactly I&amp;rsquo;ve set up some previous, only semi-technical, clients with Git. I&amp;rsquo;ve watched designers, content strategists, and copywriters go from zero to competent at using Git/SourceTree in just a few days.&lt;/p&gt;

&lt;p&gt;So: designers, SEO consultants, copywriters, accountants - anyone who works with files and folders on a computer in fact: I urge you to please give Git a go. You&amp;rsquo;ll wonder how you lived without it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>